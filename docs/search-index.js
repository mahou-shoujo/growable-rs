var N=null,E="",T="t",U="u",searchIndex={};
var R=["reusable","Creates a new pool builder with default options.","usize","with_capacity","Returns a new instance of `Growable` with memory already…","is_empty","growable","result","to_owned","clone_into","try_from","try_into","borrow_mut","type_id","default","growablepoolbuilder","formatter","GrowablePoolBuilder","GrowablePool","Growable","Reusable"];
searchIndex["growable"]={"doc":"A growable, reusable box for Rust.","i":[[3,R[17],R[6],"A customizable [`GrowablePool`] builder.",N,N],[3,R[18],E,"A pool of [`Growable`] objects. Unlike a typical…",N,N],[3,R[19],E,"A chunk of the heap memory that can be assigned with an…",N,N],[3,R[20],E,"A reusable box. It behaves just like the default [`Box`]…",N,N],[5,"replace",E,"Replaces the value, dropping the old one but not the…",N,[[[U],[R[0]]],[R[0]]]],[11,"new",E,R[1],0,[[],["self"]]],[11,"enable_overgrow",E,"If set to `false` all returning [`Growable`] will be…",0,[[["self"],["bool"]],["self"]]],[11,"with_default_capacity",E,"Sets the default capacity for each allocated [`Growable`].",0,[[["self"],[R[2]]],["self"]]],[11,"with_default_ptr_alignment",E,"Sets the default ptr alignment for each allocated…",0,[[["self"],[R[2]]],["self"]]],[11,R[3],E,"Sets a pool capacity used for every pool reallocation.…",0,[[["self"],[R[2]]],["self"]]],[11,"build",E,"Creates a new [`GrowablePool`] using this builder.",0,[[["self"]],["growablepool"]]],[11,"new",E,"Creates a new pool with default options.",1,[[],["self"]]],[11,"builder",E,R[1],1,[[],[R[15]]]],[11,R[5],E,"Returns true if a reallocation will be needed to allocate…",1,[[["self"]],["bool"]]],[11,"len",E,"Returns the current amount of allocations that this pool…",1,[[["self"]],[R[2]]]],[11,"allocate",E,"Allocates a new [`Reusable`] from the pool.",1,[[["self"],[T]],[R[0]]]],[11,"free",E,"Returns the [`Reusable`] back to the pool, marking it…",1,[[["self"],[R[0]]]]],[11,"new",E,"Returns a new instance of `Growable` but does not allocate…",2,[[],["self"]]],[11,"with_capacity_for_type",E,R[4],2,[[],["self"]]],[11,R[3],E,R[4],2,[[[R[2]]],["self"]]],[11,R[5],E,"Returns true if no memory has been allocated yet.",2,[[["self"]],["bool"]]],[11,"len",E,"Returns the amount of memory allocated by this `Growable`.",2,[[["self"]],[R[2]]]],[11,"alignment",E,"Returns the alignment.",2,[[["self"]],[R[2]]]],[11,"consume",E,"Places an instance of `T` on the heap, an actual…",2,[[[T]],[R[0]]]],[11,"free",E,"Drops the value and returns the memory back as a…",3,[[],[R[6]]]],[11,"free_move",E,"Moves the value out of this [`Reusable`] without dropping…",3,[[]]],[11,R[8],E,E,0,[[["self"]],[T]]],[11,R[9],E,E,0,[[["self"],[T]]]],[11,"into",E,E,0,[[],[U]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[10],E,E,0,[[[U]],[R[7]]]],[11,R[11],E,E,0,[[],[R[7]]]],[11,R[12],E,E,0,[[["self"]],[T]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[13],E,E,0,[[["self"]],["typeid"]]],[11,R[8],E,E,1,[[["self"]],[T]]],[11,R[9],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[10],E,E,1,[[[U]],[R[7]]]],[11,R[11],E,E,1,[[],[R[7]]]],[11,R[12],E,E,1,[[["self"]],[T]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[13],E,E,1,[[["self"]],["typeid"]]],[11,R[8],E,E,2,[[["self"]],[T]]],[11,R[9],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[10],E,E,2,[[[U]],[R[7]]]],[11,R[11],E,E,2,[[],[R[7]]]],[11,R[12],E,E,2,[[["self"]],[T]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[13],E,E,2,[[["self"]],["typeid"]]],[11,R[8],E,E,3,[[["self"]],[T]]],[11,R[9],E,E,3,[[["self"],[T]]]],[11,"into",E,E,3,[[],[U]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[10],E,E,3,[[[U]],[R[7]]]],[11,R[11],E,E,3,[[],[R[7]]]],[11,R[12],E,E,3,[[["self"]],[T]]],[11,"borrow",E,E,3,[[["self"]],[T]]],[11,R[13],E,E,3,[[["self"]],["typeid"]]],[11,"drop",E,E,2,[[["self"]]]],[11,"drop",E,E,3,[[["self"]]]],[11,R[14],E,E,0,[[],["self"]]],[11,R[14],E,E,1,[[],["self"]]],[11,R[14],E,E,2,[[],["self"]]],[11,"clone",E,E,0,[[["self"]],[R[15]]]],[11,"clone",E,E,1,[[["self"]],["self"]]],[11,"clone",E,E,2,[[["self"]],["self"]]],[11,"clone",E,E,3,[[["self"]],["self"]]],[11,"eq",E,E,0,[[[R[15]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[15]],["self"]],["bool"]]],[11,"deref",E,E,3,[[["self"]]]],[11,"deref_mut",E,E,3,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[16]]],[R[7]]]],[11,"fmt",E,E,1,[[["self"],[R[16]]],[R[7]]]],[11,"fmt",E,E,2,[[["self"],[R[16]]],[R[7]]]],[11,"fmt",E,E,3,[[["self"],[R[16]]],[R[7]]]],[11,"fmt",E,E,2,[[["self"],[R[16]]],[R[7]]]],[11,"fmt",E,E,3,[[["self"],[R[16]]],[R[7]]]]],"p":[[3,R[17]],[3,R[18]],[3,R[19]],[3,R[20]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);