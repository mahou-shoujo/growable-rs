var searchIndex = JSON.parse('{\
"growable":{"doc":"A growable, reusable box for Rust.","i":[[3,"GrowablePoolBuilder","growable","A customizable <code>GrowablePool</code> builder.",null,null],[11,"new","","Creates a new pool builder with default options.",0,[[]]],[11,"enable_overgrow","","If set to <code>false</code> all returning <code>Growable</code> will be dropped if …",0,[[["bool",15]]]],[11,"with_default_capacity","","Sets the default capacity for each allocated <code>Growable</code>.",0,[[["usize",15]]]],[11,"with_default_ptr_alignment","","Sets the default ptr alignment for each allocated <code>Growable</code>…",0,[[["usize",15]]]],[11,"with_capacity","","Sets a pool capacity used for every pool reallocation. …",0,[[["usize",15]]]],[11,"build","","Creates a new <code>GrowablePool</code> using this builder.",0,[[],["growablepool",3]]],[3,"GrowablePool","","A pool of <code>Growable</code> objects. Unlike a typical Arena-based …",null,null],[11,"new","","Creates a new pool with default options.",1,[[]]],[11,"builder","","Creates a new pool builder with default options.",1,[[],["growablepoolbuilder",3]]],[11,"is_empty","","Returns true if a reallocation will be needed to allocate …",1,[[],["bool",15]]],[11,"len","","Returns the current amount of allocations that this pool …",1,[[],["usize",15]]],[11,"allocate","","Allocates a new <code>Reusable</code> from the pool.",1,[[],["reusable",3]]],[11,"free","","Returns the <code>Reusable</code> back to the pool, marking it …",1,[[["reusable",3]]]],[3,"Growable","","A chunk of the heap memory that can be assigned with an …",null,null],[11,"new","","Returns a new instance of <code>Growable</code> but does not allocate …",2,[[]]],[11,"with_capacity_for_type","","Returns a new instance of <code>Growable</code> with memory already …",2,[[]]],[11,"with_capacity","","Returns a new instance of <code>Growable</code> with memory already …",2,[[["usize",15]]]],[11,"is_empty","","Returns true if no memory has been allocated yet.",2,[[],["bool",15]]],[11,"len","","Returns the amount of memory allocated by this <code>Growable</code>.",2,[[],["usize",15]]],[11,"alignment","","Returns the alignment.",2,[[],["usize",15]]],[11,"consume","","Places an instance of <code>T</code> on the heap, an actual …",2,[[],["reusable",3]]],[3,"Reusable","","A reusable box. It behaves just like the default <code>Box</code> (and …",null,null],[11,"free","","Drops the value and returns the memory back as a <code>Growable</code>.",3,[[],["growable",3]]],[11,"free_move","","Moves the value out of this <code>Reusable</code> without dropping it …",3,[[]]],[5,"replace","","Replaces the value, dropping the old one but not the …",null,[[["reusable",3]],["reusable",3]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"drop","","",2,[[]]],[11,"drop","","",3,[[]]],[11,"clone","","",0,[[],["growablepoolbuilder",3]]],[11,"clone","","",1,[[]]],[11,"clone","","",2,[[]]],[11,"clone","","",3,[[]]],[11,"default","","",0,[[]]],[11,"default","","",1,[[]]],[11,"default","","",2,[[]]],[11,"eq","","",0,[[["growablepoolbuilder",3]],["bool",15]]],[11,"ne","","",0,[[["growablepoolbuilder",3]],["bool",15]]],[11,"deref","","",3,[[]]],[11,"deref_mut","","",3,[[]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]]],"p":[[3,"GrowablePoolBuilder"],[3,"GrowablePool"],[3,"Growable"],[3,"Reusable"]]}\
}');
initSearch(searchIndex);